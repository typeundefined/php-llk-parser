// $ANTLR 2.7.7 (2006-11-01): "phpLexer.g" -> "PhpLexer.java"$

package php.parser.antlr;

public interface PhpTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_abstract = 4;
	int LITERAL_while = 5;
	int LITERAL_do = 6;
	int LITERAL_for = 7;
	int LITERAL_function = 8;
	int LITERAL_switch = 9;
	int LITERAL_case = 10;
	int LITERAL_default = 11;
	int LITERAL_if = 12;
	int LITERAL_else = 13;
	int LITERAL_elseif = 14;
	int LITERAL_foreach = 15;
	int LITERAL_goto = 16;
	int LITERAL_throw = 17;
	int LITERAL_return = 18;
	int LITERAL_try = 19;
	int LITERAL_catch = 20;
	int LITERAL_break = 21;
	int LITERAL_continue = 22;
	int LITERAL_finally = 23;
	int LITERAL_int = 24;
	int LITERAL_long = 25;
	int LITERAL_double = 26;
	int LITERAL_float = 27;
	int LITERAL_string = 28;
	int LITERAL_object = 29;
	int LITERAL_bool = 30;
	int LITERAL_boolean = 31;
	int LITERAL_resource = 32;
	int LITERAL_array = 33;
	int LITERAL_print = 34;
	int LITERAL_new = 35;
	int LITERAL_clone = 36;
	int LITERAL_void = 37;
	int LITERAL_class = 38;
	int LITERAL_public = 39;
	int LITERAL_use = 40;
	int LITERAL_namespace = 41;
	int LITERAL_protected = 42;
	int LITERAL_private = 43;
	int LITERAL_final = 44;
	int LITERAL_const = 45;
	int LITERAL_static = 46;
	int LITERAL_interface = 47;
	int LITERAL_implements = 48;
	int LITERAL_extends = 49;
	int LITERAL_require = 50;
	int LITERAL_require_once = 51;
	int LITERAL_include = 52;
	int LITERAL_include_once = 53;
	int LITERAL_define = 54;
	int LITERAL_true = 55;
	int LITERAL_false = 56;
	int LITERAL_echo = 57;
	int LITERAL_die = 58;
	int LITERAL_exit = 59;
	int LITERAL_endwhile = 60;
	int LITERAL_endif = 61;
	int LITERAL_endfor = 62;
	int LITERAL_endforeach = 63;
	int LITERAL_endswitch = 64;
	int LITERAL_and = 65;
	int LITERAL_or = 66;
	int LITERAL_xor = 67;
	int LITERAL_as = 68;
	int LITERAL_instanceof = 69;
	int LITERAL_var = 70;
	int LITERAL_declare = 71;
	int LITERAL_self = 72;
	int LITERAL_parent = 73;
	int LITERAL_global = 74;
	int LITERAL_list = 75;
	int DOG = 76;
	int IDENTICAL = 77;
	int EQUAL = 78;
	int LESS = 79;
	int GREATER = 80;
	int LE = 81;
	int GE = 82;
	int NONIDENT = 83;
	int NE = 84;
	int PLUS_ASS = 85;
	int MINUS_ASS = 86;
	int MULT_ASS = 87;
	int AND_ASS = 88;
	int OR_ASS = 89;
	int XOR_ASS = 90;
	int DIV_ASS = 91;
	int SHL_ASS = 92;
	int SHR_ASS = 93;
	int DOT_ASS = 94;
	int MOD_ASS = 95;
	int PLUS = 96;
	int MINUS = 97;
	int ASTERISK = 98;
	int SLASH = 99;
	int MOD = 100;
	int LAND = 101;
	int BAND = 102;
	int INC = 103;
	int DEC = 104;
	int MMBR = 105;
	int DOUBLECOLON = 106;
	int SHL = 107;
	int SHR = 108;
	int ASSIGN = 109;
	int LOR = 110;
	int BOR = 111;
	int BXOR = 112;
	int BW_NOT = 113;
	int QUESTION = 114;
	int LPAREN = 115;
	int RPAREN = 116;
	int LCURLY = 117;
	int RCURLY = 118;
	int LBRACK = 119;
	int RBRACK = 120;
	int COMMA = 121;
	int SEMI = 122;
	int COLON = 123;
	int ASSOCIATE = 124;
	int LNOT = 125;
	int LETTER = 126;
	int DIGIT = 127;
	int DIGIT_NOZERO = 128;
	int ESCAPE = 129;
	int BUCK = 130;
	int DOT = 131;
	int IDENT = 132;
	int VARIABLE = 133;
	int VAR_START = 134;
	int COMPOUND_VAR_START = 135;
	int HEREDOC = 136;
	int DOUBLE_SLASH = 137;
	int SHARP = 138;
	int SL_COMMENT = 139;
	int SL_SHARP_COMMENT = 140;
	int ML_COMMENT = 141;
	int NEWLINE = 142;
	int SPACE = 143;
	int TAB = 144;
	int BSLASH = 145;
	int EXEC_STRING = 146;
	int STRING = 147;
	int PHP_START = 148;
	int PHP_END = 149;
	int EXPONENT = 150;
	int NUMBER = 151;
}
